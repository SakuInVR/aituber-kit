import { useCallback, useEffect, useRef } from 'react';
import { toast } from 'react-hot-toast';
import { useHomeStore } from '../../features/stores/home';
import { Message, MessageContent } from '../../types/chat';
import { speakCharacter } from '@/features/messages/speakCharacter';
import { useAutoChatSettings } from './useAutoChatSettings';

export function useAutoChat() {
  const { chatLog, setState } = useHomeStore();
  const { isEnabled, silenceThreshold, theme } = useAutoChatSettings();
  const lastMessageTime = useRef<number>(Date.now());
  const isGenerating = useRef<boolean>(false);

  // 沈黙検知
  useEffect(() => {
    if (!isEnabled) return;

    const checkSilence = () => {
      const now = Date.now();
      const silenceDuration = now - lastMessageTime.current;

      if (silenceDuration >= silenceThreshold && !isGenerating.current) {
        generateAutoChat();
      }
    };

    const interval = setInterval(checkSilence, 1000);
    return () => clearInterval(interval);
  }, [isEnabled, silenceThreshold]);

  // メッセージ追加時のタイムスタンプ更新
  useEffect(() => {
    if (chatLog.length > 0) {
      const lastMessage = chatLog[chatLog.length - 1];
      if (lastMessage.role === 'assistant') {
        lastMessageTime.current = Date.now();
      }
    }
  }, [chatLog]);

  // isEnabledがfalseになったらisGeneratingもリセット
  useEffect(() => {
    if (!isEnabled) {
      isGenerating.current = false;
    }
  }, [isEnabled]);

  // 自動会話生成
  const generateAutoChat = useCallback(async () => {
    if (!isEnabled || !theme || isGenerating.current) return;

    try {
      isGenerating.current = true;

      const response = await fetch('/api/auto-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ theme, model: 'gemini' }),
      });

      if (!response.ok) {
        throw new Error('自動会話の生成に失敗しました');
      }

      const data = await response.json();

      if (data.message) {
        const messageContent: MessageContent = {
          type: 'text',
          text: data.message,
        };

        const newMessage: Message = {
          role: 'assistant',
          content: [messageContent],
          isAutoGenerated: true,
          timestamp: new Date().toISOString(),
        };

        // メッセージを追加
        setState((state: { chatLog: Message[] }) => ({
          chatLog: [...state.chatLog, newMessage],
        }));

        // TTSをトリガー
        speakCharacter(
          'auto-chat',
          { message: data.message, emotion: 'neutral' }
        );

        toast.success('自動会話を生成しました');
        return true;
      }
    } catch (error) {
      console.error('自動会話生成エラー:', error);
      toast.error('自動会話の生成に失敗しました');
    } finally {
      isGenerating.current = false;
    }

    return false;
  }, [isEnabled, theme, setState]);

  return {
    generateAutoChat,
    isGenerating: isGenerating.current,
  };
} 